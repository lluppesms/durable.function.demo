# ----------------------------------------------------------------------------------------------------
# Template to deploy a pre-built Azure Function artifact to one environment
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: variableGroupName
  default:  'myVariableGroup'
- name: environmentName
  default:  'DEV'
# if this template should deploy a pre-built resource, then supply the name of the pipeline that built it
- name: pipelineResourceIdentifier
  default: '' # e.g. 'durable.demo.app.only'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeDeploy${{ parameters.environmentName }}Function
  displayName: Initialize Deploy ${{ parameters.environmentName }} Function
  environment: ${{ parameters.environmentName }}

- job: Deploy${{ parameters.environmentName }}Function
  displayName: Deploy ${{ parameters.environmentName }} Function
  variables:
    - group: ${{ parameters.variableGroupName }}
    - name: environmentName
      value: ${{ parameters.environmentName }}

  steps:
  - bash: |
      functionAppName=$(echo "$(appName)-$(environmentName)" | tr '[:upper:]' '[:lower:]')
      echo "##vso[task.setvariable variable=functionAppName]$functionAppName"
    displayName: 'Create Variables'

  - bash: printenv | sort
    displayName: 'PrintEnv'
  
  # if a Pipeline Resource WAS supplied, then display info about the artifact and copy it over
  - ${{ if ne(parameters.pipelineResourceIdentifier, '') }}:
    - task: CmdLine@2
      inputs:
        script: |
          echo "Build Artifact Name: ${{ parameters.pipelineResourceIdentifier }}"
          echo "projectID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.projectID)"
          echo "pipelineName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineName)"
          echo "pipelineID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineID)"
          echo "runName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runName)"
          echo "runID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runID)"
          echo "runURI: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runURI)"
          echo "sourceBranch: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceBranch)"
          echo "sourceCommit: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceCommit)"
          echo "sourceProvider: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceProvider)"
          echo "requestedFor: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedFor)"
          echo "requestedForID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedForID)"
          echo "Tree of pipeline workspace:"
          tree $(Pipeline.Workspace)
          echo "Directory of pipeline workspace:"
          dir $(Pipeline.Workspace) /s
          echo "Directory of default working directory:"
          dir $(System.DefaultWorkingDirectory) /s
      displayName: 'Display Artifact Info' # for artifact $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runName)'
      continueOnError: true

    - download: ${{ parameters.pipelineResourceIdentifier }}
      displayName: Download Pipeline Artifact
      
    - task: CopyFiles@2
      displayName: Copy Resource Artifacts
      inputs:
        sourceFolder: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}/drop'
        targetFolder: '$(System.DefaultWorkingDirectory)/drop'
      continueOnError: true

    - task: CmdLine@2
      inputs:
        script: |
          echo "Tree of pipeline workspace:"
          tree $(Pipeline.Workspace)
          echo "Directory of pipeline workspace:"
          dir $(Pipeline.Workspace) /s
          echo "Directory of default working directory:"
          dir $(System.DefaultWorkingDirectory) /s
      displayName: 'Display Artifact Info' # for artifact $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runName)'
      continueOnError: true

  # if a Pipeline Resource was NOT supplied, then the artifact should be a simple download
  - ${{ if eq(parameters.pipelineResourceIdentifier, '') }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: drop
      continueOnError: true

  - task: CmdLine@2
    inputs:
      script: |
        echo "serviceConnectionName=$(serviceConnectionName)"
        echo "azureSubscription=$(azureSubscription)"
        echo "environmentName=$(environmentName)"
        echo "functionAppName=$(functionAppName)"
        echo "Directory of pipeline workspace:"
        tree $(Pipeline.Workspace)
    displayName: 'Display Variables and Tree'
    continueOnError: true

  - task: AzureFunctionApp@1
    displayName: 'Function App Deploy'
    retryCountOnTaskFailure: 2
    inputs:
      azureSubscription: $(azureSubscription)
      appType: functionAppLinux
      appName: $(functionAppName)
      package: $(Pipeline.Workspace)/*.zip
